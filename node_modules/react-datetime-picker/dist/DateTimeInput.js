'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactLifecyclesCompat = require('react-lifecycles-compat');

var _DayInput = require('react-date-picker/dist/DateInput/DayInput');

var _DayInput2 = _interopRequireDefault(_DayInput);

var _MonthInput = require('react-date-picker/dist/DateInput/MonthInput');

var _MonthInput2 = _interopRequireDefault(_MonthInput);

var _YearInput = require('react-date-picker/dist/DateInput/YearInput');

var _YearInput2 = _interopRequireDefault(_YearInput);

var _Hour12Input = require('react-time-picker/dist/TimeInput/Hour12Input');

var _Hour12Input2 = _interopRequireDefault(_Hour12Input);

var _Hour24Input = require('react-time-picker/dist/TimeInput/Hour24Input');

var _Hour24Input2 = _interopRequireDefault(_Hour24Input);

var _MinuteInput = require('react-time-picker/dist/TimeInput/MinuteInput');

var _MinuteInput2 = _interopRequireDefault(_MinuteInput);

var _SecondInput = require('react-time-picker/dist/TimeInput/SecondInput');

var _SecondInput2 = _interopRequireDefault(_SecondInput);

var _AmPm = require('react-time-picker/dist/TimeInput/AmPm');

var _AmPm2 = _interopRequireDefault(_AmPm);

var _Divider = require('./Divider');

var _Divider2 = _interopRequireDefault(_Divider);

var _NativeInput = require('./DateTimeInput/NativeInput');

var _NativeInput2 = _interopRequireDefault(_NativeInput);

var _dateFormatter = require('./shared/dateFormatter');

var _dates = require('./shared/dates');

var _propTypes3 = require('./shared/propTypes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var defaultMinDate = new Date(-8.64e15);
var defaultMaxDate = new Date(8.64e15);
var allViews = ['hour', 'minute', 'second'];

var datesAreDifferent = function datesAreDifferent(date1, date2) {
  return date1 && !date2 || !date1 && date2 || date1 && date2 && date1.getTime() !== date2.getTime();
};

var findPreviousInput = function findPreviousInput(element) {
  var previousElement = element.previousElementSibling; // Divider between inputs
  if (!previousElement) {
    return null;
  }
  return previousElement.previousElementSibling; // Actual input
};

var findNextInput = function findNextInput(element) {
  var nextElement = element.nextElementSibling; // Divider between inputs
  if (!nextElement) {
    return null;
  }
  return nextElement.nextElementSibling; // Actual input
};

var focus = function focus(element) {
  return element && element.focus();
};

var removeUnwantedCharacters = function removeUnwantedCharacters(str) {
  return str.replace(/[年月日]/g, '/').split('').filter(function (a) {
    return (
      // We don't want spaces in dates
      a.charCodeAt(0) !== 32
      // Internet Explorer specific
      && a.charCodeAt(0) !== 8206
      // Remove non-ASCII characters
      && /^[\x20-\x7F]*$/.test(a)
    );
  }).join('');
};

var DateTimeInput = function (_PureComponent) {
  _inherits(DateTimeInput, _PureComponent);

  function DateTimeInput() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, DateTimeInput);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = DateTimeInput.__proto__ || Object.getPrototypeOf(DateTimeInput)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      amPm: null,
      year: null,
      month: null,
      day: null,
      hour: null,
      minute: null,
      second: null
    }, _this.onKeyDown = function (event) {
      switch (event.key) {
        case 'ArrowLeft':
          {
            event.preventDefault();

            var input = event.target;
            var previousInput = findPreviousInput(input);
            focus(previousInput);
            break;
          }
        case 'ArrowRight':
        case _this.dateDivider:
        case _this.timeDivider:
          {
            event.preventDefault();

            var _input = event.target;
            var nextInput = findNextInput(_input);
            focus(nextInput);
            break;
          }
        default:
      }
    }, _this.onChange = function (event) {
      var _event$target = event.target,
          name = _event$target.name,
          value = _event$target.value;


      switch (name) {
        case 'hour12':
          {
            _this.setState(function (prevState) {
              return {
                hour: value ? (0, _dates.convert12to24)(parseInt(value, 10), prevState.amPm) : null
              };
            }, _this.onChangeExternal);
            break;
          }
        case 'hour24':
          {
            _this.setState({ hour: value ? parseInt(value, 10) : null }, _this.onChangeExternal);
            break;
          }
        default:
          {
            _this.setState(_defineProperty({}, name, value ? parseInt(value, 10) : null), _this.onChangeExternal);
          }
      }
    }, _this.onChangeNative = function (event) {
      var onChange = _this.props.onChange;
      var value = event.target.value;


      if (!onChange) {
        return;
      }

      var processedValue = function () {
        if (!value) {
          return null;
        }

        var _value$split = value.split('T'),
            _value$split2 = _slicedToArray(_value$split, 2),
            valueDate = _value$split2[0],
            valueTime = _value$split2[1];

        var _valueDate$split = valueDate.split('-'),
            _valueDate$split2 = _slicedToArray(_valueDate$split, 3),
            yearString = _valueDate$split2[0],
            monthString = _valueDate$split2[1],
            dayString = _valueDate$split2[2];

        var year = parseInt(yearString, 10);
        var monthIndex = parseInt(monthString, 10) - 1 || 0;
        var date = parseInt(dayString, 10) || 1;

        var _valueTime$split = valueTime.split(':'),
            _valueTime$split2 = _slicedToArray(_valueTime$split, 3),
            hourString = _valueTime$split2[0],
            minuteString = _valueTime$split2[1],
            secondString = _valueTime$split2[2];

        var hour = parseInt(hourString, 10) || 0;
        var minute = parseInt(minuteString, 10) || 0;
        var second = parseInt(secondString, 10) || 0;

        return new Date(year, monthIndex, date, hour, minute, second);
      }();

      onChange(processedValue);
    }, _this.onChangeAmPm = function (event) {
      var value = event.target.value;


      _this.setState({ amPm: value }, _this.onChangeExternal);
    }, _this.onChangeExternal = function () {
      var onChange = _this.props.onChange;


      if (!onChange) {
        return;
      }

      var formElements = [_this.dayInput, _this.monthInput, _this.yearInput, _this.hour12Input, _this.hour24Input, _this.minuteInput, _this.secondInput, _this.amPmInput].filter(Boolean);

      var formElementsWithoutSelect = formElements.slice(0, -1);

      var values = {};
      formElements.forEach(function (formElement) {
        values[formElement.name] = formElement.value;
      });

      if (formElementsWithoutSelect.every(function (formElement) {
        return !formElement.value;
      })) {
        onChange(null);
      } else if (formElements.every(function (formElement) {
        return formElement.value && formElement.checkValidity();
      })) {
        var hour = values.hour24 || (0, _dates.convert12to24)(values.hour12, values.amPm);
        var proposedValue = new Date(values.year, (values.month || 1) - 1, values.day || 1, hour, values.minute || 0, values.second || 0);
        var processedValue = proposedValue;
        onChange(processedValue);
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(DateTimeInput, [{
    key: 'renderDay',
    value: function renderDay() {
      var _props = this.props,
          maxDetail = _props.maxDetail,
          showLeadingZeros = _props.showLeadingZeros;
      var _state = this.state,
          day = _state.day,
          month = _state.month,
          year = _state.year;


      return _react2.default.createElement(_DayInput2.default, _extends({
        key: 'day'
      }, this.commonInputProps, {
        maxDetail: maxDetail,
        month: month,
        showLeadingZeros: showLeadingZeros,
        year: year,
        value: day
      }));
    }
  }, {
    key: 'renderMonth',
    value: function renderMonth() {
      var _props2 = this.props,
          maxDetail = _props2.maxDetail,
          showLeadingZeros = _props2.showLeadingZeros;
      var month = this.state.month;


      return _react2.default.createElement(_MonthInput2.default, _extends({
        key: 'month'
      }, this.commonInputProps, {
        maxDetail: maxDetail,
        showLeadingZeros: showLeadingZeros,
        value: month
      }));
    }
  }, {
    key: 'renderYear',
    value: function renderYear() {
      var year = this.state.year;


      return _react2.default.createElement(_YearInput2.default, _extends({
        key: 'year'
      }, this.commonInputProps, {
        value: year,
        valueType: 'day'
      }));
    }
  }, {
    key: 'renderHour12',
    value: function renderHour12() {
      var hour = this.state.hour;


      return _react2.default.createElement(_Hour12Input2.default, _extends({
        key: 'hour12'
      }, this.commonInputProps, {
        value: hour
      }));
    }
  }, {
    key: 'renderHour24',
    value: function renderHour24() {
      var hour = this.state.hour;


      return _react2.default.createElement(_Hour24Input2.default, _extends({
        key: 'hour24'
      }, this.commonInputProps, {
        value: hour
      }));
    }
  }, {
    key: 'renderMinute',
    value: function renderMinute() {
      var maxDetail = this.props.maxDetail;

      // Do not display if maxDetail is "hour" or less

      if (allViews.indexOf(maxDetail) < 1) {
        return null;
      }

      var _state2 = this.state,
          hour = _state2.hour,
          minute = _state2.minute;


      return _react2.default.createElement(_MinuteInput2.default, _extends({
        key: 'minute'
      }, this.commonInputProps, {
        hour: hour,
        maxDetail: maxDetail,
        value: minute
      }));
    }
  }, {
    key: 'renderSecond',
    value: function renderSecond() {
      var maxDetail = this.props.maxDetail;

      // Do not display if maxDetail is "minute" or less

      if (allViews.indexOf(maxDetail) < 2) {
        return null;
      }

      var _state3 = this.state,
          hour = _state3.hour,
          minute = _state3.minute,
          second = _state3.second;


      return _react2.default.createElement(_SecondInput2.default, _extends({
        key: 'second'
      }, this.commonInputProps, {
        hour: hour,
        maxDetail: maxDetail,
        minute: minute,
        value: second
      }));
    }
  }, {
    key: 'renderAmPm',
    value: function renderAmPm() {
      var amPm = this.state.amPm;


      return _react2.default.createElement(_AmPm2.default, _extends({
        key: 'ampm'
      }, this.commonInputProps, {
        value: amPm,
        onChange: this.onChangeAmPm
      }));
    }
  }, {
    key: 'renderCustomDateInputs',
    value: function renderCustomDateInputs() {
      var _this2 = this;

      var dateDivider = this.dateDivider,
          datePlaceholder = this.datePlaceholder;


      return datePlaceholder.split(dateDivider).map(function (part) {
        switch (part) {
          case 'day':
            return _this2.renderDay();
          case 'month':
            return _this2.renderMonth();
          case 'year':
            return _this2.renderYear();
          default:
            return null;
        }
      }).filter(Boolean).reduce(function (result, element, index) {
        if (index) {
          result.push(
          // eslint-disable-next-line react/no-array-index-key
          _react2.default.createElement(
            _Divider2.default,
            { key: 'separator_' + index },
            dateDivider
          ));
        }

        result.push(element);

        return result;
      }, []);
    }
  }, {
    key: 'renderCustomTimeInputs',
    value: function renderCustomTimeInputs() {
      var _this3 = this;

      var timeDivider = this.timeDivider,
          timePlaceholder = this.timePlaceholder;


      return timePlaceholder.split(timeDivider).map(function (part) {
        switch (part) {
          case 'hour-12':
            return _this3.renderHour12();
          case 'hour-24':
            return _this3.renderHour24();
          case 'minute':
            return _this3.renderMinute();
          case 'second':
            return _this3.renderSecond();
          case 'ampm':
            return _this3.renderAmPm();
          default:
            return null;
        }
      }).filter(Boolean).reduce(function (result, element, index) {
        if (index && element.key !== 'ampm') {
          result.push(
          // eslint-disable-next-line react/no-array-index-key
          _react2.default.createElement(
            _Divider2.default,
            { key: 'separator_' + index },
            timeDivider
          ));
        }

        result.push(element);

        return result;
      }, []);
    }
  }, {
    key: 'renderNativeInput',
    value: function renderNativeInput() {
      var _props3 = this.props,
          disabled = _props3.disabled,
          maxDate = _props3.maxDate,
          minDate = _props3.minDate,
          name = _props3.name,
          required = _props3.required,
          value = _props3.value;


      return _react2.default.createElement(_NativeInput2.default, {
        key: 'time',
        disabled: disabled,
        maxDate: maxDate || defaultMaxDate,
        minDate: minDate || defaultMinDate,
        name: name,
        onChange: this.onChangeNative,
        required: required,
        value: value,
        valueType: this.valueType
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var className = this.props.className;


      return _react2.default.createElement(
        'div',
        { className: className },
        this.renderNativeInput(),
        this.renderCustomDateInputs(),
        _react2.default.createElement(
          _Divider2.default,
          null,
          '\xA0'
        ),
        this.renderCustomTimeInputs()
      );
    }
  }, {
    key: 'dateDivider',


    // eslint-disable-next-line class-methods-use-this
    get: function get() {
      var locale = this.props.locale;

      var date = new Date(2017, 11, 11);

      return removeUnwantedCharacters((0, _dateFormatter.formatDate)(date, locale)).match(/[^0-9]/)[0];
    }

    // eslint-disable-next-line class-methods-use-this

  }, {
    key: 'timeDivider',
    get: function get() {
      var locale = this.props.locale;

      var date = new Date(2017, 0, 1, 21, 12, 13);

      return removeUnwantedCharacters((0, _dateFormatter.formatTime)(date, locale)).match(/[^0-9]/)[0];
    }

    // eslint-disable-next-line class-methods-use-this

  }, {
    key: 'datePlaceholder',
    get: function get() {
      var locale = this.props.locale;

      var date = new Date(2017, 11, 11);

      return removeUnwantedCharacters((0, _dateFormatter.formatDate)(date, locale)).replace('2017', 'year').replace('12', 'month').replace('11', 'day');
    }

    // eslint-disable-next-line class-methods-use-this

  }, {
    key: 'timePlaceholder',
    get: function get() {
      var locale = this.props.locale;

      var date = new Date(2017, 0, 1, 21, 13, 14);

      return removeUnwantedCharacters((0, _dateFormatter.formatTime)(date, locale)).replace('21', 'hour-24').replace('9', 'hour-12').replace('13', 'minute').replace('14', 'second').replace(/AM|PM/i, this.timeDivider + 'ampm');
    }
  }, {
    key: 'maxTime',
    get: function get() {
      var maxDate = this.props.maxDate;


      if (!maxDate) {
        return null;
      }

      var _state4 = this.state,
          year = _state4.year,
          month = _state4.month,
          day = _state4.day;


      if ((0, _dates.getYear)(maxDate) !== year || (0, _dates.getMonth)(maxDate) !== month || (0, _dates.getDay)(maxDate) !== day) {
        return null;
      }

      return (0, _dates.getHoursMinutesSeconds)(maxDate);
    }
  }, {
    key: 'minTime',
    get: function get() {
      var minDate = this.props.minDate;


      if (!minDate) {
        return null;
      }

      var _state5 = this.state,
          year = _state5.year,
          month = _state5.month,
          day = _state5.day;


      if ((0, _dates.getYear)(minDate) !== year || (0, _dates.getMonth)(minDate) !== month || (0, _dates.getDay)(minDate) !== day) {
        return null;
      }

      return (0, _dates.getHoursMinutesSeconds)(minDate);
    }
  }, {
    key: 'commonInputProps',
    get: function get() {
      var _this4 = this;

      var maxTime = this.maxTime,
          minTime = this.minTime;
      var _props4 = this.props,
          className = _props4.className,
          disabled = _props4.disabled,
          isWidgetOpen = _props4.isWidgetOpen,
          maxDate = _props4.maxDate,
          minDate = _props4.minDate,
          required = _props4.required;


      return {
        className: className,
        disabled: disabled,
        maxDate: maxDate || defaultMaxDate,
        maxTime: maxTime,
        minDate: minDate || defaultMinDate,
        minTime: minTime,
        onChange: this.onChange,
        onKeyDown: this.onKeyDown,
        placeholder: '--',
        // This is only for showing validity when editing
        required: required || isWidgetOpen,
        itemRef: function itemRef(ref, name) {
          // Save a reference to each input field
          _this4[name + 'Input'] = ref;
        }
      };
    }

    /**
     * Returns value type that can be returned with currently applied settings.
     */

  }, {
    key: 'valueType',
    get: function get() {
      var maxDetail = this.props.maxDetail;


      return maxDetail;
    }

    /**
     * Called when non-native date input is changed.
     */


    /**
     * Called when native date input is changed.
     */


    /**
     * Called after internal onChange. Checks input validity. If all fields are valid,
     * calls props.onChange.
     */

  }], [{
    key: 'getDerivedStateFromProps',
    value: function getDerivedStateFromProps(nextProps, prevState) {
      var nextState = {};

      /**
       * If isWidgetOpen flag has changed, we have to update it.
       * It's saved in state purely for use in getDerivedStateFromProps.
       */
      if (nextProps.isWidgetOpen !== prevState.isWidgetOpen) {
        nextState.isWidgetOpen = nextProps.isWidgetOpen;
      }

      /**
       * If the next value is different from the current one  (with an exception of situation in
       * which values provided are limited by minDate and maxDate so that the dates are the same),
       * get a new one.
       */
      var nextValue = nextProps.value;
      if (
      // Toggling calendar visibility resets values
      nextState.isCalendarOpen // Flag was toggled
      || datesAreDifferent(nextValue, prevState.value)) {
        if (nextValue) {
          var _convert24to = (0, _dates.convert24to12)((0, _dates.getHours)(nextValue));

          var _convert24to2 = _slicedToArray(_convert24to, 2);

          nextState.amPm = _convert24to2[1];

          nextState.year = (0, _dates.getYear)(nextValue);
          nextState.month = (0, _dates.getMonth)(nextValue);
          nextState.day = (0, _dates.getDay)(nextValue);
          nextState.hour = (0, _dates.getHours)(nextValue);
          nextState.minute = (0, _dates.getMinutes)(nextValue);
          nextState.second = (0, _dates.getSeconds)(nextValue);
        } else {
          nextState.amPm = null;
          nextState.year = null;
          nextState.month = null;
          nextState.day = null;
          nextState.hour = null;
          nextState.minute = null;
          nextState.second = null;
        }
        nextState.value = nextValue;
      }

      return nextState;
    }
  }]);

  return DateTimeInput;
}(_react.PureComponent);

exports.default = DateTimeInput;


DateTimeInput.defaultProps = {
  maxDetail: 'minute',
  name: 'datetime'
};

DateTimeInput.propTypes = {
  className: _propTypes2.default.string.isRequired,
  disabled: _propTypes2.default.bool,
  isWidgetOpen: _propTypes2.default.bool,
  locale: _propTypes2.default.string,
  maxDate: _propTypes3.isMaxDate,
  maxDetail: _propTypes2.default.oneOf(allViews),
  minDate: _propTypes3.isMinDate,
  name: _propTypes2.default.string,
  onChange: _propTypes2.default.func,
  required: _propTypes2.default.bool,
  showLeadingZeros: _propTypes2.default.bool,
  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.instanceOf(Date)])
};

(0, _reactLifecyclesCompat.polyfill)(DateTimeInput);